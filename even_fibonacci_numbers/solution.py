# To Run:
# `python3 even_fibonacci_numbers/solution.py`

# Problem
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
# 1,2,3,5,8,13,21,34,55,89
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

def fib_seq():
    fib_list = [1, 2]
    sum_of_last_two_numbers = 0

    while sum_of_last_two_numbers < 4000000:
        # get the last two numbers in the list and add them together
        sum_of_last_two_numbers = fib_list[-1] + fib_list[-2]

        # push that number to the end of the list
        fib_list.append(sum_of_last_two_numbers)

    # filter the fib_list to only include even numbers
    even_numbers = [even_num for even_num in fib_list if even_num % 2 == 0]

    # calculare the sum of the even numbers in the list
    even_total = sum(even_numbers)
    print("even total", even_total)


def test_fib_seq():
    fib_seq()

test_fib_seq()
